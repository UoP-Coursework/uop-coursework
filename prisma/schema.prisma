// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String
  role             String?
  username         String?   @unique @db.VarChar(20)
  country          String    @default("") @db.VarChar(60)
  email            String    @unique
  emailVerified    DateTime?
  carbon_offset    Int?
  carbon_footprint Int?
  address          String?   @db.VarChar(40)
  address2         String?   @db.VarChar(40)
  town_city        String?   @db.VarChar(40)
  postcode         String?   @db.VarChar(15)
  image            String?

  accounts Account[]
  sessions Session[]

  sent_to       Friend[]       @relation("sent_to")
  sent_by       Friend[]       @relation("sent_by")
  vehicleowners User_Vehicle[] @relation("vehicleowners")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Friend {
  sent_by_id  String
  sent_to_id  String
  is_accepted Boolean?

  sent_to User @relation("sent_to", fields: [sent_by_id], references: [id], onDelete: Cascade)
  sent_by User @relation("sent_by", fields: [sent_to_id], references: [id], onDelete: Cascade)

  @@id([sent_by_id, sent_to_id])
}

model Vehicle {
  vehicle_id     Int      @id @default(autoincrement())
  brand_id       Int
  type_id        Int
  fuel_id        Int
  country        String   @db.VarChar(60)
  model          String   @db.VarChar(20)
  model_year     DateTime
  ulez_compliant Boolean

  ownedvehicles User_Vehicle[] @relation("ownedvehicles")

  type  Vehicle_Type  @relation("type", fields: [type_id], references: [type_id], onDelete: Cascade)
  fuel  Vehicle_Fuel  @relation("fuel", fields: [fuel_id], references: [fuel_id], onDelete: Cascade)
  brand Vehicle_Brand @relation("brand", fields: [brand_id], references: [brand_id], onDelete: Cascade)
}

model User_Vehicle {
  owner_id   String
  vehicle_id Int

  ownedvehicles Vehicle @relation("ownedvehicles", fields: [vehicle_id], references: [vehicle_id], onDelete: Cascade)
  vehicleowners User    @relation("vehicleowners", fields: [owner_id], references: [id], onDelete: Cascade)

  @@id([owner_id, vehicle_id])
}

model Vehicle_Type {
  type_id Int    @id @default(autoincrement())
  name    String @db.VarChar(20)

  type Vehicle[] @relation("type")
}

model Vehicle_Brand {
  brand_id Int    @id @default(autoincrement())
  name     String @db.VarChar(20)

  brand Vehicle[] @relation("brand")
}

model Vehicle_Fuel {
  fuel_id Int    @id @default(autoincrement())
  name    String @db.VarChar(10)

  fuel Vehicle[] @relation("fuel")
}
